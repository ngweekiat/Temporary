Option Explicit

Sub Edge_LogAllCDPEvents_AndDumpHTML()
    Dim b As AutomateBrowser
    Dim msg As Dictionary
    Dim start As Date
    Dim timeoutSeconds As Long
    Dim html As String
    
    Set b = New_AutomateBrowser
    
    ' Launch Edge (headless optional; remove the inline commands to see window)
    b.launch whichBrowser:=browserType.Edge, _
             url:="https://en.wikipedia.org/wiki/Kitten", _
             killWithoutAsking:=True
    
    ' Enable the domains we want to see events from
    b.cdp.Page.enable
    b.cdp.DOM.enable
    b.cdp.Runtime.enable
    b.cdp.Network.enable
    b.cdp.Target.setDiscoverTargets True
    
    timeoutSeconds = 20
    start = Now
    
    Do While DateDiff("s", start, Now) < timeoutSeconds
        ' Step 1: pull in any new events
        b.cdp.peakMessage
        
        ' Step 2: pop and log all queued messages
        Do
            Set msg = b.cdp.popMessageFromQueue
            If msg Is Nothing Then Exit Do
            
            ' Pretty print the event/response
            If msg.Exists("method") Then
                Debug.Print "Event: " & msg("method")
            ElseIf msg.Exists("id") Then
                Debug.Print "Response to id=" & msg("id")
            Else
                Debug.Print "Message: " & JsonConverter.ConvertToJson(msg)
            End If
        Loop
        
        DoEvents
    Loop
    
    Debug.Print "=== Done logging events ==="
    
    ' Grab HTML snapshot after logging
    html = CStr(b.jsEval("document.documentElement.outerHTML"))
    Debug.Print "=== HTML Snapshot ==="
    Debug.Print html
    Debug.Print "HTML length = " & Len(html)
    
    b.Quit
End Sub



'====================================================================
Option Explicit

' Keep a single browser instance alive
Private gBrowser As AutomateBrowser

Function FetchXMLBySerial(ByVal serialNumber As String) As String
    Dim msg As Dictionary
    Dim start As Date
    Dim timeoutSeconds As Long
    Dim xmlText As String
    Dim url As String
    Dim targetId As String
    
    ' Initialize browser once
    If gBrowser Is Nothing Then
        Set gBrowser = New_AutomateBrowser
        gBrowser.launch whichBrowser:=browserType.Edge, _
                        url:="about:blank", _
                        killWithoutAsking:=True
        gBrowser.cdp.Page.enable
        gBrowser.cdp.Runtime.enable
        gBrowser.cdp.Network.enable
        gBrowser.cdp.Target.setDiscoverTargets True
    End If
    
    ' Build the URL for this serial
    url = "https://yourserver/path/to/" & serialNumber & ".xml"
    
    ' Open new tab for this request
    targetId = gBrowser.cdp.Target.createTarget(url)
    gBrowser.cdp.Target.attachToTarget targetId, True
    
    ' Wait for load event
    timeoutSeconds = 15
    start = Now
    Do While DateDiff("s", start, Now) < timeoutSeconds
        gBrowser.cdp.peakMessage
        Set msg = gBrowser.cdp.popMessageFromQueue
        If Not msg Is Nothing Then
            If msg.Exists("method") Then
                If msg("method") = "Page.loadEventFired" Then
                    Exit Do
                End If
            End If
        End If
        DoEvents
    Loop
    
    ' Grab XML (still uses DOM, but you can switch to Network.getResponseBody if needed)
    xmlText = CStr(gBrowser.jsEval("document.documentElement.outerHTML"))
    
    ' Return it
    FetchXMLBySerial = xmlText
    
    ' Close the tab we just opened
    gBrowser.cdp.Target.closeTarget targetId
End Function


Sub TestFetchSerials()
    Dim serials As Variant
    Dim s As Variant
    Dim xmlResult As String
    
    ' Example list of serial numbers
    serials = Array("12345", "67890", "ABCDE")
    
    For Each s In serials
        xmlResult = FetchXMLBySerial(CStr(s))
        Debug.Print "Serial " & s & " length=" & Len(xmlResult)
    Next s
    
    ' When done, close the browser completely
    gBrowser.Quit
    Set gBrowser = Nothing
End Sub
