Option Explicit

Sub Edge_LogAllCDPEvents_AndDumpHTML()
    Dim b As AutomateBrowser
    Dim msg As Dictionary
    Dim start As Date
    Dim timeoutSeconds As Long
    Dim html As String
    
    Set b = New_AutomateBrowser
    
    ' Launch Edge (headless optional; remove the inline commands to see window)
    b.launch whichBrowser:=browserType.Edge, _
             url:="https://en.wikipedia.org/wiki/Kitten", _
             killWithoutAsking:=True
    
    ' Enable the domains we want to see events from
    b.cdp.Page.enable
    b.cdp.DOM.enable
    b.cdp.Runtime.enable
    b.cdp.Network.enable
    b.cdp.Target.setDiscoverTargets True
    
    timeoutSeconds = 20
    start = Now
    
    Do While DateDiff("s", start, Now) < timeoutSeconds
        ' Step 1: pull in any new events
        b.cdp.peakMessage
        
        ' Step 2: pop and log all queued messages
        Do
            Set msg = b.cdp.popMessageFromQueue
            If msg Is Nothing Then Exit Do
            
            ' Pretty print the event/response
            If msg.Exists("method") Then
                Debug.Print "Event: " & msg("method")
            ElseIf msg.Exists("id") Then
                Debug.Print "Response to id=" & msg("id")
            Else
                Debug.Print "Message: " & JsonConverter.ConvertToJson(msg)
            End If
        Loop
        
        DoEvents
    Loop
    
    Debug.Print "=== Done logging events ==="
    
    ' Grab HTML snapshot after logging
    html = CStr(b.jsEval("document.documentElement.outerHTML"))
    Debug.Print "=== HTML Snapshot ==="
    Debug.Print html
    Debug.Print "HTML length = " & Len(html)
    
    b.Quit
End Sub



'====================================================================
Option Explicit

Private gBrowser As AutomateBrowser   ' keep Edge alive across calls




Function FetchXMLBySerial(ByVal serialNumber As String) As String
    Dim msg As Dictionary
    Dim start As Date
    Dim timeoutSeconds As Long
    Dim url As String
    Dim targetId As String
    Dim xmlText As String
    
    ' Launch Edge only once
    If gBrowser Is Nothing Then
        Set gBrowser = New_AutomateBrowser
        gBrowser.launch whichBrowser:=browserType.Edge, _
                        url:="about:blank", _
                        killWithoutAsking:=True
        gBrowser.cdp.Page.enable
        gBrowser.cdp.Runtime.enable
        gBrowser.cdp.Network.enable
    End If
    
    ' Build URL with serial number
    url = "https://yourserver/path/to/" & serialNumber & ".xml"
    
    ' Create new blank tab and attach
    targetId = gBrowser.cdp.Target.createTarget("about:blank")
    gBrowser.cdp.Target.attachToTarget targetId, True
    
    ' Navigate that tab to the XML URL
    gBrowser.cdp.Page.navigate url
    
    ' Wait for load
    timeoutSeconds = 15
    start = Now
    Do While DateDiff("s", start, Now) < timeoutSeconds
        gBrowser.cdp.peakMessage
        Set msg = gBrowser.cdp.popMessageFromQueue
        If Not msg Is Nothing Then
            If msg.Exists("method") Then
                If msg("method") = "Page.loadEventFired" Then Exit Do
            End If
        End If
        DoEvents
    Loop
    
    ' Extract XML text
    xmlText = CStr(gBrowser.jsEval("document.documentElement.outerHTML"))
    FetchXMLBySerial = xmlText
    
    ' Close the tab after extraction
    gBrowser.cdp.Target.closeTarget targetId
End Function



Sub TestFetchXMLList()
    Dim serials As Variant
    Dim sn As Variant
    Dim result As String
    
    serials = Array("12345", "67890", "ABCDE")   ' list of serial numbers
    
    For Each sn In serials
        result = FetchXMLBySerial(sn)
        Debug.Print "Serial: " & sn
        Debug.Print Left(result, 200) & "..."    ' preview first 200 chars
    Next sn
    
    ' Close the browser once done
    CloseBrowser
End Sub


Sub CloseBrowser()
    If Not gBrowser Is Nothing Then
        gBrowser.Quit
        Set gBrowser = Nothing
    End If
End Sub

