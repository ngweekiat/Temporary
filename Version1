Option Explicit

Sub Edge_LogAllCDPEvents_AndDumpHTML()
    Dim b As AutomateBrowser
    Dim msg As Dictionary
    Dim start As Date
    Dim timeoutSeconds As Long
    Dim html As String
    
    Set b = New_AutomateBrowser
    
    ' Launch Edge (headless optional; remove the inline commands to see window)
    b.launch whichBrowser:=browserType.Edge, _
             url:="https://en.wikipedia.org/wiki/Kitten", _
             killWithoutAsking:=True
    
    ' Enable the domains we want to see events from
    b.cdp.Page.enable
    b.cdp.DOM.enable
    b.cdp.Runtime.enable
    b.cdp.Network.enable
    b.cdp.Target.setDiscoverTargets True
    
    timeoutSeconds = 20
    start = Now
    
    Do While DateDiff("s", start, Now) < timeoutSeconds
        ' Step 1: pull in any new events
        b.cdp.peakMessage
        
        ' Step 2: pop and log all queued messages
        Do
            Set msg = b.cdp.popMessageFromQueue
            If msg Is Nothing Then Exit Do
            
            ' Pretty print the event/response
            If msg.Exists("method") Then
                Debug.Print "Event: " & msg("method")
            ElseIf msg.Exists("id") Then
                Debug.Print "Response to id=" & msg("id")
            Else
                Debug.Print "Message: " & JsonConverter.ConvertToJson(msg)
            End If
        Loop
        
        DoEvents
    Loop
    
    Debug.Print "=== Done logging events ==="
    
    ' Grab HTML snapshot after logging
    html = CStr(b.jsEval("document.documentElement.outerHTML"))
    Debug.Print "=== HTML Snapshot ==="
    Debug.Print html
    Debug.Print "HTML length = " & Len(html)
    
    b.Quit
End Sub



'====================================================================
Option Explicit

' Global browser instance (kept alive across calls)
Private gBrowser As AutomateBrowser

Function FetchXML(ByVal file_serialNumber As String) As String
    Dim msg As Dictionary
    Dim resp As Dictionary
    Dim reqId As String
    Dim xmlText As String
    Dim url As String
    Dim timeoutSeconds As Long
    Dim start As Date
    Dim targetId As String
    
    ' Launch browser once if not already running
    If gBrowser Is Nothing Then
        Set gBrowser = New_AutomateBrowser
        gBrowser.launch whichBrowser:=browserType.Edge, _
                        url:="about:blank", _
                        killWithoutAsking:=True
        gBrowser.cdp.Network.enable
        gBrowser.cdp.Page.enable
        gBrowser.cdp.Target.setDiscoverTargets True
    End If
    
    ' Build XML URL
    url = "https://yourserver/path/to/file_" & file_serialNumber & ".xml"
    
    ' Open in new tab
    targetId = gBrowser.cdp.Target.createTarget(url)
    gBrowser.cdp.Target.attachToTarget targetId, True
    
    ' Wait for first Network.responseReceived
    timeoutSeconds = 15
    start = Now
    reqId = vbNullString
    Do While DateDiff("s", start, Now) < timeoutSeconds
        gBrowser.cdp.peakMessage
        Set msg = gBrowser.cdp.popMessageFromQueue
        If Not msg Is Nothing Then
            If msg.Exists("method") Then
                If msg("method") = "Network.responseReceived" Then
                    reqId = msg("params")("requestId")
                    Exit Do
                End If
            End If
        End If
        DoEvents
    Loop
    
    ' Fetch raw body
    If reqId <> vbNullString Then
        Set resp = gBrowser.cdp.InvokeMethod("Network.getResponseBody", _
                     MakeDict("requestId", reqId))
        If Not resp Is Nothing Then
            xmlText = resp("body")
            ' Trim to start at <rss
            Dim pos As Long
            pos = InStr(1, xmlText, "<rss", vbTextCompare)
            If pos > 0 Then xmlText = Mid$(xmlText, pos)
            FetchXML = xmlText
        End If
    End If
    
    ' Close this tab
    gBrowser.cdp.Target.closeTarget targetId
End Function

' Cleanup routine: close browser when done
Sub CloseBrowser()
    If Not gBrowser Is Nothing Then
        gBrowser.Quit
        Set gBrowser = Nothing
    End If
End Sub

' Helper to build a dictionary easily
Private Function MakeDict(key As String, val As String) As Dictionary
    Dim d As New Dictionary
    d.Add key, val
    Set MakeDict = d
End Function

' Example usage
Sub TestFetchXML()
    Dim xml As String
    
    xml = FetchXML("12345")
    Debug.Print Left(xml, 500)   ' preview
    
    xml = FetchXML("67890")
    Debug.Print Left(xml, 500)   ' preview
    
    ' When all done
    CloseBrowser
End Sub
